// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1 "github.com/loft-sh/agentapi/v4/pkg/apis/loft/cluster/v1"
	storagev1 "github.com/loft-sh/agentapi/v4/pkg/apis/loft/storage/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=cluster.loft.sh, Version=v1
	case v1.SchemeGroupVersion.WithResource("chartinfos"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().ChartInfos().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("clusterquotas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().ClusterQuotas().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("features"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().Features().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("helmreleases"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().HelmReleases().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("localclusteraccesses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().LocalClusterAccesses().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("sleepmodeconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().SleepModeConfigs().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("spaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().Spaces().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("virtualclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1().VirtualClusters().Informer()}, nil

		// Group=storage.loft.sh, Version=v1
	case storagev1.SchemeGroupVersion.WithResource("clusterquotas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().ClusterQuotas().Informer()}, nil
	case storagev1.SchemeGroupVersion.WithResource("localclusteraccesses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().LocalClusterAccesses().Informer()}, nil
	case storagev1.SchemeGroupVersion.WithResource("localteams"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().LocalTeams().Informer()}, nil
	case storagev1.SchemeGroupVersion.WithResource("localusers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().LocalUsers().Informer()}, nil
	case storagev1.SchemeGroupVersion.WithResource("virtualclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().VirtualClusters().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
