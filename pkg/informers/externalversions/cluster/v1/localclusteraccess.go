// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	clusterv1 "github.com/loft-sh/agentapi/v4/pkg/apis/loft/cluster/v1"
	versioned "github.com/loft-sh/agentapi/v4/pkg/clientset/versioned"
	internalinterfaces "github.com/loft-sh/agentapi/v4/pkg/informers/externalversions/internalinterfaces"
	v1 "github.com/loft-sh/agentapi/v4/pkg/listers/cluster/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// LocalClusterAccessInformer provides access to a shared informer and lister for
// LocalClusterAccesses.
type LocalClusterAccessInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.LocalClusterAccessLister
}

type localClusterAccessInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewLocalClusterAccessInformer constructs a new informer for LocalClusterAccess type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewLocalClusterAccessInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredLocalClusterAccessInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredLocalClusterAccessInformer constructs a new informer for LocalClusterAccess type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredLocalClusterAccessInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ClusterV1().LocalClusterAccesses().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ClusterV1().LocalClusterAccesses().Watch(context.TODO(), options)
			},
		},
		&clusterv1.LocalClusterAccess{},
		resyncPeriod,
		indexers,
	)
}

func (f *localClusterAccessInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredLocalClusterAccessInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *localClusterAccessInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&clusterv1.LocalClusterAccess{}, f.defaultInformer)
}

func (f *localClusterAccessInformer) Lister() v1.LocalClusterAccessLister {
	return v1.NewLocalClusterAccessLister(f.Informer().GetIndexer())
}
